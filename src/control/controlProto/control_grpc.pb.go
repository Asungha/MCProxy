// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: control.proto

package controlProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricService_Metric_FullMethodName = "/control.MetricService/Metric"
	MetricService_Event_FullMethodName  = "/control.MetricService/Event"
	MetricService_Chat_FullMethodName   = "/control.MetricService/Chat"
	MetricService_Logs_FullMethodName   = "/control.MetricService/Logs"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	Metric(ctx context.Context, opts ...grpc.CallOption) (MetricService_MetricClient, error)
	Event(ctx context.Context, opts ...grpc.CallOption) (MetricService_EventClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (MetricService_ChatClient, error)
	Logs(ctx context.Context, opts ...grpc.CallOption) (MetricService_LogsClient, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) Metric(ctx context.Context, opts ...grpc.CallOption) (MetricService_MetricClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[0], MetricService_Metric_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceMetricClient{stream}
	return x, nil
}

type MetricService_MetricClient interface {
	Send(*MetricData) error
	CloseAndRecv() (*Placeholder, error)
	grpc.ClientStream
}

type metricServiceMetricClient struct {
	grpc.ClientStream
}

func (x *metricServiceMetricClient) Send(m *MetricData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceMetricClient) CloseAndRecv() (*Placeholder, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Placeholder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) Event(ctx context.Context, opts ...grpc.CallOption) (MetricService_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[1], MetricService_Event_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceEventClient{stream}
	return x, nil
}

type MetricService_EventClient interface {
	Send(*EventData) error
	CloseAndRecv() (*Placeholder, error)
	grpc.ClientStream
}

type metricServiceEventClient struct {
	grpc.ClientStream
}

func (x *metricServiceEventClient) Send(m *EventData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceEventClient) CloseAndRecv() (*Placeholder, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Placeholder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (MetricService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[2], MetricService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceChatClient{stream}
	return x, nil
}

type MetricService_ChatClient interface {
	Send(*ChatData) error
	CloseAndRecv() (*Placeholder, error)
	grpc.ClientStream
}

type metricServiceChatClient struct {
	grpc.ClientStream
}

func (x *metricServiceChatClient) Send(m *ChatData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceChatClient) CloseAndRecv() (*Placeholder, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Placeholder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) Logs(ctx context.Context, opts ...grpc.CallOption) (MetricService_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[3], MetricService_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceLogsClient{stream}
	return x, nil
}

type MetricService_LogsClient interface {
	Send(*LogData) error
	CloseAndRecv() (*Placeholder, error)
	grpc.ClientStream
}

type metricServiceLogsClient struct {
	grpc.ClientStream
}

func (x *metricServiceLogsClient) Send(m *LogData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceLogsClient) CloseAndRecv() (*Placeholder, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Placeholder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility
type MetricServiceServer interface {
	Metric(MetricService_MetricServer) error
	Event(MetricService_EventServer) error
	Chat(MetricService_ChatServer) error
	Logs(MetricService_LogsServer) error
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricServiceServer struct {
}

func (UnimplementedMetricServiceServer) Metric(MetricService_MetricServer) error {
	return status.Errorf(codes.Unimplemented, "method Metric not implemented")
}
func (UnimplementedMetricServiceServer) Event(MetricService_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedMetricServiceServer) Chat(MetricService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedMetricServiceServer) Logs(MetricService_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_Metric_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).Metric(&metricServiceMetricServer{stream})
}

type MetricService_MetricServer interface {
	SendAndClose(*Placeholder) error
	Recv() (*MetricData, error)
	grpc.ServerStream
}

type metricServiceMetricServer struct {
	grpc.ServerStream
}

func (x *metricServiceMetricServer) SendAndClose(m *Placeholder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceMetricServer) Recv() (*MetricData, error) {
	m := new(MetricData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).Event(&metricServiceEventServer{stream})
}

type MetricService_EventServer interface {
	SendAndClose(*Placeholder) error
	Recv() (*EventData, error)
	grpc.ServerStream
}

type metricServiceEventServer struct {
	grpc.ServerStream
}

func (x *metricServiceEventServer) SendAndClose(m *Placeholder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceEventServer) Recv() (*EventData, error) {
	m := new(EventData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).Chat(&metricServiceChatServer{stream})
}

type MetricService_ChatServer interface {
	SendAndClose(*Placeholder) error
	Recv() (*ChatData, error)
	grpc.ServerStream
}

type metricServiceChatServer struct {
	grpc.ServerStream
}

func (x *metricServiceChatServer) SendAndClose(m *Placeholder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceChatServer) Recv() (*ChatData, error) {
	m := new(ChatData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).Logs(&metricServiceLogsServer{stream})
}

type MetricService_LogsServer interface {
	SendAndClose(*Placeholder) error
	Recv() (*LogData, error)
	grpc.ServerStream
}

type metricServiceLogsServer struct {
	grpc.ServerStream
}

func (x *metricServiceLogsServer) SendAndClose(m *Placeholder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceLogsServer) Recv() (*LogData, error) {
	m := new(LogData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Metric",
			Handler:       _MetricService_Metric_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Event",
			Handler:       _MetricService_Event_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _MetricService_Chat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _MetricService_Logs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}

const (
	CommandService_Command_FullMethodName = "/control.CommandService/Command"
)

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	Command(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (CommandService_CommandClient, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) Command(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (CommandService_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandService_ServiceDesc.Streams[0], CommandService_Command_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandService_CommandClient interface {
	Recv() (*CommandData, error)
	grpc.ClientStream
}

type commandServiceCommandClient struct {
	grpc.ClientStream
}

func (x *commandServiceCommandClient) Recv() (*CommandData, error) {
	m := new(CommandData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	Command(*Placeholder, CommandService_CommandServer) error
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) Command(*Placeholder, CommandService_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Placeholder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServiceServer).Command(m, &commandServiceCommandServer{stream})
}

type CommandService_CommandServer interface {
	Send(*CommandData) error
	grpc.ServerStream
}

type commandServiceCommandServer struct {
	grpc.ServerStream
}

func (x *commandServiceCommandServer) Send(m *CommandData) error {
	return x.ServerStream.SendMsg(m)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _CommandService_Command_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control.proto",
}

const (
	AuthService_Auth_FullMethodName          = "/control.AuthService/Auth"
	AuthService_AuthChallenge_FullMethodName = "/control.AuthService/AuthChallenge"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	AuthChallenge(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthChallenge(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	AuthChallenge(context.Context, *Placeholder) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServiceServer) AuthChallenge(context.Context, *Placeholder) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthChallenge not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Placeholder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthChallenge(ctx, req.(*Placeholder))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AuthService_Auth_Handler,
		},
		{
			MethodName: "AuthChallenge",
			Handler:    _AuthService_AuthChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
